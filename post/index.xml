<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Nemocdz&#39;s Blog</title>
    <link>https://nemocdz.github.io/post/</link>
    <description>Recent content in Posts on Nemocdz&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© Nemocdz. </copyright>
    <lastBuildDate>Tue, 31 Dec 2019 16:26:00 +0800</lastBuildDate>
    
	<atom:link href="https://nemocdz.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WebRTC Native 模块单独编译静态库（iOS）</title>
      <link>https://nemocdz.github.io/post/webrtc-native-%E6%A8%A1%E5%9D%97%E5%8D%95%E7%8B%AC%E7%BC%96%E8%AF%91%E9%9D%99%E6%80%81%E5%BA%93ios/</link>
      <pubDate>Tue, 31 Dec 2019 16:26:00 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/webrtc-native-%E6%A8%A1%E5%9D%97%E5%8D%95%E7%8B%AC%E7%BC%96%E8%AF%91%E9%9D%99%E6%80%81%E5%BA%93ios/</guid>
      <description>&lt;p&gt;项目里面用到了 WebRTC 某些模块，以前是源码拷贝集成的。这样不仅需要处理平台的宏（WebRTC Native 跨平台），而且升级版本也会涉及依赖等问题，所以探索了一下怎么用编码编译出可用的静态库。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SwiftUI 初探</title>
      <link>https://nemocdz.github.io/post/swift-ui-%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Mon, 30 Dec 2019 12:08:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/swift-ui-%E5%88%9D%E6%8E%A2/</guid>
      <description>&lt;p&gt;十月份参加极光黑客马拉松一天时间写了个简单的 &lt;a href=&#34;https://github.com/Nemocdz/TrainTicket-SwiftUI&#34;&gt;火车票 OCR 应用“票夹”&lt;/a&gt;，当时由于时间和熟练程度原因，并没有试下今年 WWDC 刚推出的 SwiftUI 框架。最近抽空用了 SwiftUI + Combine 进行重写，顺便感受了一下这两个新框架的魅力。先说个人感受，SwiftUI 看起来挺美好的，但是目前有 Bug 和完善度不高，比较适合用在不关心设计的 Demo 或者个人功能性项目上。Combine 完成度尚可，但 Xcode 对复杂闭包的自动推断经常失效，比较影响编码体验。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Apple 官方异步编程框架：Swift Combine 应用</title>
      <link>https://nemocdz.github.io/post/apple-%E5%AE%98%E6%96%B9%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6swift-combine-%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 23 Sep 2019 16:18:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/apple-%E5%AE%98%E6%96%B9%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6swift-combine-%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;WWDC 2019 Session 721 - &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2019/721/&#34;&gt;Combine in Practice&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;

&lt;p&gt;Combine 是 WWDC2019 推出的异步编程框架，在上篇 &lt;a href=&#34;https://nemocdz.github.io/post/apple-官方异步编程框架swift-combine-简介/&#34;&gt;文章&lt;/a&gt; 中，介绍了 Combine 的基本概念。在这篇文章中，着重介绍一些 Combine 的实际应用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Apple 官方异步编程框架：Swift Combine 简介</title>
      <link>https://nemocdz.github.io/post/apple-%E5%AE%98%E6%96%B9%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6swift-combine-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 23 Sep 2019 15:18:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/apple-%E5%AE%98%E6%96%B9%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6swift-combine-%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;WWDC 2019 Session 722 - &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2019/722/&#34;&gt;Introducing Combine&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;

&lt;p&gt;在现代 GUI 编程中，开发者会处理大量事件（包括网络，屏幕输入，系统通知等），根据事件去让界面变化。而对异步事件的处理，会让代码和状态变得复杂。而现有的 Cocoa 框架中，异步编程的接口主要有以下这几种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Target/Action&lt;/li&gt;
&lt;li&gt;NotificationCenter&lt;/li&gt;
&lt;li&gt;KVO&lt;/li&gt;
&lt;li&gt;Callbacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而在实际情况中，由于不同的第三方库，系统框架，业务代码可能采用不一样的方式处理异步事件，会导致对事件的处理分散且存在差异。苹果为了帮助开发者简化异步编程，发布了 Swift 的异步编程框架 - Combine。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Foundation 框架的新亮点</title>
      <link>https://nemocdz.github.io/post/foundation-%E6%A1%86%E6%9E%B6%E7%9A%84%E6%96%B0%E4%BA%AE%E7%82%B9md/</link>
      <pubDate>Mon, 23 Sep 2019 14:18:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/foundation-%E6%A1%86%E6%9E%B6%E7%9A%84%E6%96%B0%E4%BA%AE%E7%82%B9md/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;WWDC 2019 Session 723 - &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2019/723/&#34;&gt;Advances in Foundation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>[译] 图像优化</title>
      <link>https://nemocdz.github.io/post/%E8%AF%91-%E5%9B%BE%E5%83%8F%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 23 Sep 2019 01:09:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E8%AF%91-%E5%9B%BE%E5%83%8F%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;作者：Jordan Morgan&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a href=&#34;https://www.swiftjectivec.com/optimizing-images/&#34;&gt;Optimizing Images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文日期：2018-12-11&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;俗话说得好，最好的相机是你身边的那个。那么毫无疑问 - iPhone 可以说是这个星球最重要的的相机。而这在业界也已经达成共识。&lt;/p&gt;

&lt;p&gt;在度假？不偷偷拍几张记录在你的 Instagram 故事里？不存在的。&lt;/p&gt;

&lt;p&gt;出现爆炸新闻？查看 Twitter，就可以知道是哪些媒体正在报道，通过他们揭露事件的实时照片。&lt;/p&gt;

&lt;p&gt;等等……&lt;/p&gt;

&lt;p&gt;正因为图像在平台上无处不在，如果管理不当，很容易出现性能和内存问题。稍微了解下 UIKit，搞清楚它处理图像的机制，可以节省大量时间，避免做无用功。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Swift 5 字符串插值快速构建 AttributeString</title>
      <link>https://nemocdz.github.io/post/%E4%BD%BF%E7%94%A8-swift-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%92%E5%80%BC%E7%AE%80%E5%8D%95%E6%9E%84%E5%BB%BA-attributestring/</link>
      <pubDate>Thu, 05 Sep 2019 11:13:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E4%BD%BF%E7%94%A8-swift-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%92%E5%80%BC%E7%AE%80%E5%8D%95%E6%9E%84%E5%BB%BA-attributestring/</guid>
      <description>&lt;p&gt;一直以来，在 Cocoa 体系里构建富文本是一件很繁琐的事情，使用 Foundation 框架里的 &lt;code&gt;NSAttributeString&lt;/code&gt; 来进行构建，有着要区分可变与不可变，传入需要查阅文档的参数字典，没有类型检查等种种别扭之处。Swift 5 出现的新字符串插值特性，让处理自定义字符串字面量成为可能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译] Swift 5 字符串插值-AttributedStrings</title>
      <link>https://nemocdz.github.io/post/%E8%AF%91-swift-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%92%E5%80%BC-attributedstrings/</link>
      <pubDate>Tue, 23 Apr 2019 19:17:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E8%AF%91-swift-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%92%E5%80%BC-attributedstrings/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;作者：Olivier Halligon&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a href=&#34;http://alisoftware.github.io/swift/2018/12/16/swift5-stringinterpolation-part2/&#34;&gt;StringInterpolation in Swift 5 — AttributedStrings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文日期：2018-12-16&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们已经在 &lt;a href=&#34;https://nemocdz.github.io/post/译-swift-5-字符串插值-简介/&#34;&gt;前文&lt;/a&gt; 里介绍了 Swift 5 全新的 StringInterpolation 设计。在这第二部分中，我会着眼于 &lt;code&gt;ExpressibleByStringInterpolation&lt;/code&gt; 其中一种应用，让 &lt;code&gt;NSAttributedString&lt;/code&gt; 变得更优雅。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译] Swift 5 字符串插值-简介</title>
      <link>https://nemocdz.github.io/post/%E8%AF%91-swift-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%92%E5%80%BC-%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 22 Apr 2019 19:17:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E8%AF%91-swift-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%92%E5%80%BC-%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;作者：Olivier Halligon&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a href=&#34;http://alisoftware.github.io/swift/2018/12/15/swift5-stringinterpolation-part1/&#34;&gt;StringInterpolation in Swift 5 — Introduction&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文日期：2018-12-15&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;StringInterpolation&lt;/code&gt; 协议最初的设计效率低下又不易扩展，为了在后续的版本中能够将其彻底重构，Swift 4 中将该协议标记为废弃。即将在 Swift 5 中亮相的 &lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md&#34;&gt;SE-0228&lt;/a&gt; 提案介绍了一种新的 &lt;code&gt;StringInterpolation&lt;/code&gt; 设计，使得 String 有了更大的潜能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 实现简单的列表预加载</title>
      <link>https://nemocdz.github.io/post/ios-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%97%E8%A1%A8%E9%A2%84%E5%8A%A0%E8%BD%BD/</link>
      <pubDate>Thu, 07 Feb 2019 17:17:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%97%E8%A1%A8%E9%A2%84%E5%8A%A0%E8%BD%BD/</guid>
      <description>&lt;p&gt;在大部分 App 中，在有 feeds 流之类列表的地方，由于后端数据一般采用分页加载，为了用户体验需要做预加载。最简单的加载方式，就是当列表显示的内容达到一定的数量时候，自动请求下一个分页。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>给 Cocoa 的系统 Protocol 提供默认实现</title>
      <link>https://nemocdz.github.io/post/%E7%BB%99-cocoa-%E7%9A%84%E7%B3%BB%E7%BB%9F-protocol-%E6%8F%90%E4%BE%9B%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 06 Feb 2019 21:58:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E7%BB%99-cocoa-%E7%9A%84%E7%B3%BB%E7%BB%9F-protocol-%E6%8F%90%E4%BE%9B%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;使用 Swift 时，如果是自定义的 Protocol，可以通过 Extension 来提供部分方法的默认实现，但系统原有的 Protocol 却不行，大概是因为系统的 Protocol 是 Objective-C 实现的缘故。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅析 SSH</title>
      <link>https://nemocdz.github.io/post/%E6%B5%85%E6%9E%90-ssh/</link>
      <pubDate>Mon, 04 Feb 2019 01:36:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E6%B5%85%E6%9E%90-ssh/</guid>
      <description>&lt;p&gt;SSH（Secure Shell）是一种通用的基于软件的网络安全性协议。通过 SSH 客户端和服务器来进行加密的网络通信。通常在用于安全远程登录、文件传输、执行远程命令、访问控制、端口转发等操作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微信小程序 TypeScript 尝试</title>
      <link>https://nemocdz.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-typescript-%E5%B0%9D%E8%AF%95/</link>
      <pubDate>Wed, 30 Jan 2019 20:47:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-typescript-%E5%B0%9D%E8%AF%95/</guid>
      <description>&lt;p&gt;自从去年开始在项目里写了一段时间 Javascript 后，感觉没有类型检查的语言还是不太适合我，所以一直想尝试下 TypeScript，然而由于项目庞大，人员协作问题，一时半会没办法切成 TypeScript。正好最近有小程序的需求和小程序去年 11 月开始官方支持了 TypeScript，所以拿来练练手。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈移动端图片压缩(iOS &amp; Android)</title>
      <link>https://nemocdz.github.io/post/%E6%B5%85%E8%B0%88%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Sun, 20 Jan 2019 20:32:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E6%B5%85%E8%B0%88%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</guid>
      <description>&lt;p&gt;在 App 中，如果分享、发布、上传功能涉及到图片，必不可少会对图片进行一定程度的压缩。笔者最近在公司项目中恰好重构了双端（iOS&amp;amp;Android）的图片压缩模块。本文会非常基础的讲解一些图片压缩的方式和思路。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2018</title>
      <link>https://nemocdz.github.io/post/2018/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/2018/</guid>
      <description>&lt;p&gt;今年对我来说是特别的一年，22 岁，从大学顺利毕业，开始工作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译] Hacking Hit Tests</title>
      <link>https://nemocdz.github.io/post/%E8%AF%91-hacking-hit-tests/</link>
      <pubDate>Thu, 27 Dec 2018 01:09:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E8%AF%91-hacking-hit-tests/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;作者：Soroush Khanlou&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a href=&#34;http://khanlou.com/2018/09/hacking-hit-tests/&#34;&gt;Hacking Hit Tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文日期：2018-09-07&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;回想 &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2015/408/&#34;&gt;Crusty 教我们使用面向协议编程&lt;/a&gt;之前的日子，我们大多使用继承来共享代码的实现。通常在 UIKit 编程中，你可能会用 &lt;code&gt;UIView&lt;/code&gt; 的子类去添加一些子视图，重写 &lt;code&gt;-layoutSubviews&lt;/code&gt;，然后重复这些工作。也许你还会重写 &lt;code&gt;-drawRect&lt;/code&gt;。但当你需要做一些特别的事情时，就需要看看 &lt;code&gt;UIView&lt;/code&gt; 中其他可以被重写的方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译] Mirror 的工作原理</title>
      <link>https://nemocdz.github.io/post/%E8%AF%91-mirror-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 14 Oct 2018 01:09:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E8%AF%91-mirror-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;作者：&lt;a href=&#34;https://twitter.com/mikeash/&#34;&gt;Mike Ash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文链接：&lt;a href=&#34;https://swift.org/blog/how-mirror-works/&#34;&gt;How Mirror Works&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文日期：2018-09-26&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;尽管 Swift 重心在强调静态类型上，但它同时支持丰富的元数据类型。元数据类型允许代码在运行时检查和操作任意值。这个功能通过 &lt;code&gt;Mirror&lt;/code&gt; API 暴露给 Swift 开发者。大家可能会感到困惑，在 Swift 这种如此强调静态类型的语言里，&lt;code&gt;Mirror&lt;/code&gt; 这样的特性是怎么工作的？让我们一起来通过这篇文章了解一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 设置代理（Proxy）方案总结</title>
      <link>https://nemocdz.github.io/post/ios-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86proxy%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 26 Sep 2018 02:16:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86proxy%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;最近因为项目需要，需要在打开某个网址时设置 HTTP 代理。所以做了相关的技术方案调研，并总结下来。&lt;/p&gt;

&lt;p&gt;在 WebView 设置 Proxy 的方式，就是对请求进行拦截并重新处理。还有一种全局的实现方案，使用 iOS 9 以后才有的 NetworkExtension，但是这种方案会在用户看来像是个微皮恩的 App，不友好且太重了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>把 setState 整明白</title>
      <link>https://nemocdz.github.io/post/%E6%8A%8A-setstate-%E6%95%B4%E6%98%8E%E7%99%BD/</link>
      <pubDate>Mon, 06 Aug 2018 11:17:00 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E6%8A%8A-setstate-%E6%95%B4%E6%98%8E%E7%99%BD/</guid>
      <description>&lt;p&gt;加入新团队后，团队项目使用了 React Native。刚开始接触 React Native，除了学习React Native 的使用，更要了解 React.js 这个框架，才能更好的使用。而 React 框架中，笔者一开始就感觉奇妙的，就是这个看似同步，表现却不一定是同步的 &lt;code&gt;setState&lt;/code&gt; 方法。看了网上一些文章，结论似乎都是从某几篇博客相互借鉴的结论，但里面笔者还是觉得有一些不太明白的地方，幸亏 &lt;a href=&#34;https://github.com/facebook/react&#34;&gt;React.js 源码&lt;/a&gt; 是开源的。顺着源码看下去，一些困惑的问题终于有些眉目。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why is MetaClass in Objective-C？</title>
      <link>https://nemocdz.github.io/post/why-is-metaclass-in-objective-c/</link>
      <pubDate>Fri, 15 Sep 2017 01:40:00 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/why-is-metaclass-in-objective-c/</guid>
      <description>&lt;p&gt;这篇文章源于美团面试官问的我一个问题，为什么 Objective-C 中有 Class 和 MetaClass 这种设计？去掉是否可以？当时的我并没有深入思考过这个问题，而网上搜索的结果都是在阐述有 MetaClass 而简略的解释了原因。我认为这个问题是个很关键的问题，花了大概两周时间查阅资料，查看源码。这篇文章试图展开探讨一个问题，为什么 Objective-C 中有 MetaClass 这个设计？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再谈 Objective-C 弱引用容器的实现-关联对象实现 weak</title>
      <link>https://nemocdz.github.io/post/%E5%86%8D%E8%B0%88-objective-c-%E5%BC%B1%E5%BC%95%E7%94%A8%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0-%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0weak/</link>
      <pubDate>Sat, 02 Sep 2017 03:36:00 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E5%86%8D%E8%B0%88-objective-c-%E5%BC%B1%E5%BC%95%E7%94%A8%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0-%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1%E5%AE%9E%E7%8E%B0weak/</guid>
      <description>&lt;p&gt;之前写了一篇 &lt;a href=&#34;https://nemocdz.github.io/post/objective-c%E5%BC%B1%E5%BC%95%E7%94%A8%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/&#34;&gt;文章&lt;/a&gt; 总结了 OC 中弱引用容器实现，在小米面试中提到其中 CFFoundation 的做法，面试官问了我一个问题，这样实现后在这些元素在被销毁后，还保留在容器中会有什么问题么？我马上意识到，这些元素会变成野指针，且之前只实现了引用计数的不变，而没有实现 Weak 特质，也就是没有在销毁后置 nil，也没有被移除，那么容器外界再访问时就会崩溃。看来之前考虑得还是太片面，也没有做更周全的实验。&lt;/p&gt;

&lt;p&gt;所以看了 Runtime 源码和文章后，订正弱引用容器的一些实现方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从一道网易面试题浅谈 Objective-C 线程安全</title>
      <link>https://nemocdz.github.io/post/%E4%BB%8E%E4%B8%80%E9%81%93%E7%BD%91%E6%98%93%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B5%85%E8%B0%88-objective-c-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</link>
      <pubDate>Fri, 25 Aug 2017 02:46:12 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E4%BB%8E%E4%B8%80%E9%81%93%E7%BD%91%E6%98%93%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B5%85%E8%B0%88-objective-c-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</guid>
      <description>&lt;p&gt;今天去网易面试，面试官出了一道面试题，下面代码会发生什么问题？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP/IP 协议族边学边想</title>
      <link>https://nemocdz.github.io/post/tcpip-%E5%8D%8F%E8%AE%AE%E6%97%8F%E8%BE%B9%E5%AD%A6%E8%BE%B9%E6%83%B3/</link>
      <pubDate>Tue, 22 Aug 2017 03:28:20 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/tcpip-%E5%8D%8F%E8%AE%AE%E6%97%8F%E8%BE%B9%E5%AD%A6%E8%BE%B9%E6%83%B3/</guid>
      <description>&lt;p&gt;最近读了《图解 TCP/IP》这本书，重新理解了大二囫囵吞枣，应付考试而学习的“计算机网络”和 “TCP/IP” 这两门课中一些未理解的知识，和疑惑的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《征服 C 指针》读书笔记</title>
      <link>https://nemocdz.github.io/post/%E5%BE%81%E6%9C%8D-c-%E6%8C%87%E9%92%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 21 Aug 2017 01:35:21 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E5%BE%81%E6%9C%8D-c-%E6%8C%87%E9%92%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;用英语来解读-c-的声明&#34;&gt;用英语来解读 C 的声明&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;首先着眼于识别符（变量名或者函数名）。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从距离识别符最近的地方开始，依照优先顺序解释派生类型（指针，数组，函数）。优先顺序说明如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;用于整理声明内容的括弧&lt;/li&gt;
&lt;li&gt;用于表示数组的 &lt;code&gt;[]&lt;/code&gt;，用于表示函数的 &lt;code&gt;()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用于表示指针的 &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解释完成派生型，使用“of”或“to”或“returning”将它们连接起来。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;C 里面不存在多维数组。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>AFNetworking 的漂亮细节</title>
      <link>https://nemocdz.github.io/post/afnetworking-%E7%9A%84%E6%BC%82%E4%BA%AE%E7%BB%86%E8%8A%82/</link>
      <pubDate>Wed, 16 Aug 2017 03:31:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/afnetworking-%E7%9A%84%E6%BC%82%E4%BA%AE%E7%BB%86%E8%8A%82/</guid>
      <description>&lt;p&gt;最近重读了 AFNetworking 源码，发现很多以前读不懂，也不知道为啥这么写的代码慢慢读懂了。过程中被 AFNetworking 作者的对细节，舒服，整洁的追求所折服。把一些个人觉得写的漂亮的用法总结下来，本文不在于探讨 AFNetworking 源码的具体业余实现，尽量从代码本身和设计角度进行总结（源码解析推荐 &lt;a href=&#34;http://www.jianshu.com/p/856f0e26279d&#34;&gt;AFNetworking 到底做了什么？&lt;/a&gt; 这篇文章）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 10 通知框架 UserNotifications 学习及兼容笔记</title>
      <link>https://nemocdz.github.io/post/ios-10-%E9%80%9A%E7%9F%A5%E6%A1%86%E6%9E%B6-usernotifications-%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%BC%E5%AE%B9%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 28 Jul 2017 18:18:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-10-%E9%80%9A%E7%9F%A5%E6%A1%86%E6%9E%B6-usernotifications-%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%BC%E5%AE%B9%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;在 iOS 10 上，苹果将原来散落在 UIKit 中各处的用户通知相关的代码进行重构，剥离，打造了一个全新的通知框架 UserNotifications。笔者最近在开发公司通知相关的需求，跟着 WWDC 2016 的视频和官方文档，学习了一下新框架。同时，在学习过程中，和老框架对应 API 进行对比，有了个人的感受和看法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Objective-C 弱引用容器实现方案总结</title>
      <link>https://nemocdz.github.io/post/objective-c-%E5%BC%B1%E5%BC%95%E7%94%A8%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 23 Jul 2017 04:55:00 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/objective-c-%E5%BC%B1%E5%BC%95%E7%94%A8%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;在 OC 中 Foundation 框架中的常用容器类（&lt;code&gt;NSSet&lt;/code&gt;，&lt;code&gt;NSDictionary&lt;/code&gt;，&lt;code&gt;NSArray&lt;/code&gt;）及其可变子类在加入元素时，均会对元素进行强引用。有的时候（比如持有多个 Delegate 对象时），希望有对应的弱引用容器使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《程序员的自我修养》读书笔记</title>
      <link>https://nemocdz.github.io/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 20 Jul 2017 03:31:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;线程&#34;&gt;线程&lt;/h2&gt;

&lt;p&gt;线程是程序执行流的最小单元。&lt;/p&gt;

&lt;p&gt;各个线程之间共享程序的内存空间和进程级资源。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《iOS Core Animation》读书笔记</title>
      <link>https://nemocdz.github.io/post/ios-core-animation%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 13 Jul 2017 03:02:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-core-animation%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;calayer&#34;&gt;CALayer&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;UIView&lt;/code&gt; = 绘制 + 响应触摸事件&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;负责屏幕和显示，不负责触摸事件响应链&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIView&lt;/code&gt; 是其高级封装&lt;/li&gt;
&lt;li&gt;和 &lt;code&gt;UIView&lt;/code&gt; 层级一一对应&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>《C 陷阱与缺陷》读书笔记</title>
      <link>https://nemocdz.github.io/post/c-%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 13 Jul 2017 01:28:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/c-%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;多字符记号&#34;&gt;多字符记号&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;输入流到给定字符串，识别成记号后，会尽可能包含之后字符构成最长字符串作为记号&lt;/li&gt;
&lt;li&gt;组合赋值运算符是两个记号，如 &lt;code&gt;+=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Cocoa 多线程总结</title>
      <link>https://nemocdz.github.io/post/cocoa-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 28 Jun 2017 11:31:02 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/cocoa-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;个人学习总结笔记。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 中实现支持小数的星星评分组件</title>
      <link>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%94%AF%E6%8C%81%E5%B0%8F%E6%95%B0%E7%9A%84%E6%98%9F%E6%98%9F%E8%AF%84%E5%88%86%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sun, 21 May 2017 19:15:23 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%94%AF%E6%8C%81%E5%B0%8F%E6%95%B0%E7%9A%84%E6%98%9F%E6%98%9F%E8%AF%84%E5%88%86%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;p&gt;在很多电商，外卖，餐饮型应用里，都会在商品结束后评价中有一个星星组件。核心思路就是用 &lt;code&gt;UIControl&lt;/code&gt; 并自定义实现其中的 trackTouch 的几个方法。而显示不到一个的星星，比如半个星星的思路是根据分数切割星星的图像并显示其中一部分。实现后效果如下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 中实现静态 Cell 通用的 TableViewManager</title>
      <link>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81-cell-%E9%80%9A%E7%94%A8%E7%9A%84-tableviewmanager/</link>
      <pubDate>Sun, 14 May 2017 21:36:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81-cell-%E9%80%9A%E7%94%A8%E7%9A%84-tableviewmanager/</guid>
      <description>&lt;p&gt;在 App 中，比如侧边栏，设置，个人界面，编辑表单，总会有一些地方用到一些静态 Cell 构成的 TableView，这些界面的特点是，Cell 种类繁多，Model 种类繁多，点击事件处理分散但单调（页面跳转，编辑 textFiled），重复写 tableViewDelegate 和 datasource 的相关方法，但不会用到一些奇怪的 datasource 和 delegate 方法，而且显示内容一般是固定的，每个页面 Cell 的数量不会很多。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 原生二维码界面开发的一些注意点</title>
      <link>https://nemocdz.github.io/post/ios-%E5%8E%9F%E7%94%9F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%95%8C%E9%9D%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Sun, 14 May 2017 01:33:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E5%8E%9F%E7%94%9F%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%95%8C%E9%9D%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>&lt;p&gt;之前的 &lt;a href=&#34;https://nemocdz.github.io/post/ios%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%94%9F%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F%E7%95%8C%E9%9D%A2/&#34;&gt;文章&lt;/a&gt; 是在 ViewController 里实现了原生二维码扫描的功能，后来觉得 VC 太重了，便把功能抽成了一个 View，在抽象的过程中也仔细捉摸了一些没有仔细思考过的问题，特此记录下来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 中实现原生的二维码扫描界面</title>
      <link>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%94%9F%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Fri, 21 Apr 2017 18:49:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%94%9F%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F%E7%95%8C%E9%9D%A2/</guid>
      <description>&lt;p&gt;二维码扫描是很多应用都会实现的功能，比较著名的第三方开源库是 Google 出品的 &lt;a href=&#34;https://github.com/zxing/zxing&#34;&gt;ZXing&lt;/a&gt;，其的 OC 的移植版本是 &lt;a href=&#34;https://github.com/TheLevelUp/ZXingObjC&#34;&gt;ZXingObjc&lt;/a&gt;。但是从 iOS 7 开始，苹果就加入了原生 API 的相机二维码扫描功能，而在 iOS 8 中也加入了原生的从图片中识别二维码的功能，最近刚好接到一个需求开发一个二维码扫描的界面，把过程记录下来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 Cocoapods 管理单元测试填坑之旅</title>
      <link>https://nemocdz.github.io/post/%E7%94%A8-cocoapods-%E7%AE%A1%E7%90%86%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%A1%AB%E5%9D%91%E4%B9%8B%E6%97%85/</link>
      <pubDate>Thu, 13 Apr 2017 03:02:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/%E7%94%A8-cocoapods-%E7%AE%A1%E7%90%86%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%A1%AB%E5%9D%91%E4%B9%8B%E6%97%85/</guid>
      <description>&lt;p&gt;Cocoapods 1.3.0 版本之后官方已经支持用 pod 集成单元测试，详情看 &lt;a href=&#34;https://guides.cocoapods.org/using/test-specs.html&#34;&gt;官方指南&lt;/a&gt;，此篇文章只针对当时 1.0.0 版本下的情况，仅做保存记录。**&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 中实现多列联动的 PickerView</title>
      <link>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%88%97%E8%81%94%E5%8A%A8%E7%9A%84-pickerview/</link>
      <pubDate>Wed, 29 Mar 2017 01:33:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%88%97%E8%81%94%E5%8A%A8%E7%9A%84-pickerview/</guid>
      <description>&lt;p&gt;去年年底写了一个自定义的 PickerView，&lt;a href=&#34;https://nemocdz.github.io/post/ios%E4%B8%AD%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89pickerview/&#34;&gt;文章&lt;/a&gt; 在这里。当时对 Block 和各种复用思想还理解很浅薄，只是单纯的实现了一个单列数据的 Picker，前几天还看到评论有人给我提了些建议，便花了一天时间做了些升级，做了多列联动的实现。多列联动的 Picker 很常见，比如用在地址选择，如省-市-区中。网上搜索的例子要不是只写死指定的列数，要不然就是指定数据格式严格而复杂。我的强迫症又犯了，要写，就写一个，简单而且，能无限列联动的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TableView 和 CollectionView 通用的 DataSource 和 Cell</title>
      <link>https://nemocdz.github.io/post/tableview-%E5%92%8C-collectionview-%E9%80%9A%E7%94%A8-datasource-%E5%92%8C-cell/</link>
      <pubDate>Sat, 25 Mar 2017 17:11:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/tableview-%E5%92%8C-collectionview-%E9%80%9A%E7%94%A8-datasource-%E5%92%8C-cell/</guid>
      <description>&lt;p&gt;刚进公司不到一个月，接到一个需求，把一个项目的界面改一下。看了项目里的视图，耦合性强，没有复用，改起 UI 来很费劲。新的界面是个列表视图，就寻思怎么写出一个后面接手的人改起 UI 不那么费劲的 Tableview，顺便把项目里老的 CollectionView 也进行了类比，偷偷进行了重构。毕竟 UI 总是改来改去的，而常用的 Tableview 和 Collecitonview 更是应该让其扩展性更好，复用性更强。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TableView 内嵌套 CollectionView 动态高度的实现（表单或图片分享）</title>
      <link>https://nemocdz.github.io/post/tableview-%E5%86%85%E5%B5%8C%E5%A5%97-collectionview-%E5%8A%A8%E6%80%81%E9%AB%98%E5%BA%A6%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BC%E8%A1%A8%E5%8D%95%E6%88%96%E5%9B%BE%E7%89%87%E5%88%86%E4%BA%AB%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Tue, 24 Jan 2017 01:24:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/tableview-%E5%86%85%E5%B5%8C%E5%A5%97-collectionview-%E5%8A%A8%E6%80%81%E9%AB%98%E5%BA%A6%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BC%E8%A1%A8%E5%8D%95%E6%88%96%E5%9B%BE%E7%89%87%E5%88%86%E4%BA%AB%E7%95%8C%E9%9D%A2/</guid>
      <description>&lt;p&gt;在有社交分享平台属性的 App 中，我们经常看见类似有 TableView 中多图展示。不管是发布的表单界面中，还是社交动态的时间线的界面中，都需要根据图片数量动态变化界面。最近刚好写了一个这样的界面，花了点时间写了个 Demo 总结一下，希望可以帮助有需要的人。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TableView 支持不同种类的 Cell</title>
      <link>https://nemocdz.github.io/post/tableview-%E6%94%AF%E6%8C%81%E4%B8%8D%E5%90%8C%E7%A7%8D%E7%B1%BB%E7%9A%84-cell/</link>
      <pubDate>Sun, 08 Jan 2017 03:52:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/tableview-%E6%94%AF%E6%8C%81%E4%B8%8D%E5%90%8C%E7%A7%8D%E7%B1%BB%E7%9A%84-cell/</guid>
      <description>&lt;p&gt;在项目中，偶尔需要让 TableView 里支持不同种类的 Cell，比如微博的原创微博和别人转发的微博，就是两种 Cell。又或是类似支付宝的的 timeline 也有各种类型的 Cell。在同一个 TableView 里实现不同种类的 Cell，一般有两种方法，一种是把所有种类的 Cell 先注册了，再根据不同的 identifer 去加载 Cell，一种是在 init 时创建不同的 identifer 的 Cell。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 中权限小 Tips 和监测相册变化</title>
      <link>https://nemocdz.github.io/post/ios-%E4%B8%AD%E6%9D%83%E9%99%90%E5%B0%81%E8%A3%85%E5%B0%8Ftips%E5%92%8C%E7%9B%91%E6%B5%8B%E7%9B%B8%E5%86%8C%E5%8F%98%E5%8C%96/</link>
      <pubDate>Wed, 14 Dec 2016 23:05:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E4%B8%AD%E6%9D%83%E9%99%90%E5%B0%81%E8%A3%85%E5%B0%8Ftips%E5%92%8C%E7%9B%91%E6%B5%8B%E7%9B%B8%E5%86%8C%E5%8F%98%E5%8C%96/</guid>
      <description>&lt;p&gt;之前写了一个仿 Snapseed 的 ImagePicker，见 &lt;a href=&#34;https://github.com/Nemocdz/CDZImagePickerDemo&#34;&gt;Demo&lt;/a&gt; 和之前的 &lt;a href=&#34;https://nemocdz.github.io/post/ios%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%BB%BFsnapseed%E7%9A%84%E7%85%A7%E7%89%87%E9%80%89%E6%8B%A9%E5%99%A8/&#34;&gt;文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;之后发现有人说第一次未授权时 &lt;code&gt;UICCollectionview&lt;/code&gt; 会加载不出照片，发现没有在合适时候调用权限管理。iOS 10 的这个权限管理是 info.plist 的一个键值，没有回调方法。查询 PhotosKit 方法里，发现有一个权限回调方法，就想封装一个方法来友好的询问用户权限。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 中实现仿 Snapseed 的照片选择器</title>
      <link>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%BB%BF-snapseed-%E7%9A%84%E7%85%A7%E7%89%87%E9%80%89%E6%8B%A9%E5%99%A8/</link>
      <pubDate>Sun, 04 Dec 2016 01:55:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%BB%BF-snapseed-%E7%9A%84%E7%85%A7%E7%89%87%E9%80%89%E6%8B%A9%E5%99%A8/</guid>
      <description>&lt;p&gt;ImagePickerController（图片选择器）是 iOS 开发中一个很常用的 UI 控件。作为摄影爱好者，而 Google 出品的摄影后期 App，Snapseed 中那个图片选择器，好看又实用，便尝试着仿写了一个。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 中简单封装自定义 PickerView</title>
      <link>https://nemocdz.github.io/post/ios-%E4%B8%AD%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89-pickerview/</link>
      <pubDate>Sat, 19 Nov 2016 02:28:13 +0800</pubDate>
      
      <guid>https://nemocdz.github.io/post/ios-%E4%B8%AD%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89-pickerview/</guid>
      <description>&lt;p&gt;&lt;code&gt;UIPickerView&lt;/code&gt; 是 iOS 开发中，相当常用的一个 UI 控件，用于滚动选择选项。也是项目中经常复用的一个控件，封装成一个统一风格的库，可以减少很多代码量。一般还会在 PickerView 上加上 Toolbar 和确定取消按钮。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>